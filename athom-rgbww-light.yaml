globals:
  - id: fast_boot
    type: int
    restore_value: yes
    initial_value: '0'

esphome:
  name: "${name}"
#  name_add_mac_suffix: true
  project:
    name: "${project_name}"
    version: "${project_version}"
  on_boot:
    then:
      - script.execute: fast_boot_script


esp8266:
  board: esp8285
  restore_from_flash: true

preferences:
  flash_write_interval: 1min
  
api:
  encryption:
    key: ${api_encryption_key}

ota:
  password: ${ota_password}

logger:

mdns:
  disabled: false

web_server:
  port: 80
  auth:
    username: ${web_username}
    password: ${web_password}

wifi:
  ssid: ${wifi_ssid}
  password: ${wifi_password}
  domain: .amp.dedyn.io
  ap: 
    ssid: ${ap_ssid}
    password: ${ap_password}

captive_portal:

binary_sensor:
  - platform: status
    name: "${friendly_name} Status"

sensor:
  - platform: uptime
    name: "${friendly_name} Uptime Seconds"
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

  - platform: wifi_signal
    id: wifiSignal
    name: "WiFi Signal Sensor"
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: wifi_txt_status
            state: !lambda |- 
              float signal_rssi = id(wifiSignal).raw_state;
              return (
                (signal_rssi >= -67.0) ? "Good" :
                (signal_rssi < -67.0 && signal_rssi >= -70.0) ? "Ok" :
                (signal_rssi < -70.0) ? "Bad" : "N/A"
              );

output:
  - platform: esp8266_pwm
    id: red_output
    pin: GPIO4
    min_power: 0.000499
    max_power: 1
  - platform: esp8266_pwm
    id: green_output
    pin: GPIO12
    min_power: 0.000499
    max_power: 1
  - platform: esp8266_pwm
    id: blue_output
    pin: GPIO14
    min_power: 0.000499
    max_power: 1
  - platform: esp8266_pwm
    id: warm_white_output
    pin: GPIO13
    min_power: 0.000499
    max_power: 1
  - platform: esp8266_pwm
    id: white_output
    pin: GPIO5
    min_power: 0.000499
    max_power: 1

light:
  - platform: rgbww
    id: rgbww_light
    name: "${friendly_name}"
    restore_mode: ${light_restore_mode}
    red: red_output
    green: green_output
    blue: blue_output
    warm_white: warm_white_output
    cold_white: white_output
    cold_white_color_temperature: 6000 K
    warm_white_color_temperature: 3000 K
    color_interlock: ${color_interlock}

button:
  - platform: factory_reset
    name: Restart with Factory Default Settings
    id: Reset
  - platform: restart
    name: "Restart node"
    id: Restart


script:
  - id: fast_boot_script
    then:
      - if:
          condition:
            lambda: return ( id(fast_boot) >= 3 );
          then:
            - lambda: |-
                ESP_LOGD("athom-rgbww-light.yaml", "Now the counter is greater than or equal to 3, perform reset device and reboot");
                id(fast_boot) = 0;
                fast_boot->loop();
                global_preferences->sync();
                auto call = id(rgbww_light).turn_on();
                call.set_transition_length(500);
                call.set_brightness(1.0);
                call.set_color_mode(ColorMode::RGB);
                call.set_rgb(0.0, 0.0, 1.0);
                call.perform();
            - delay: 5s
            - button.press: Reset
      - lambda: |-
          id(fast_boot) += 1;
          fast_boot->loop();
          global_preferences->sync();
          ESP_LOGD("athom-rgbww-light.yaml", "Now the counter is %d.  Reset the device when the counter is greater than or equal to 3", id(fast_boot));
      - delay: 10s
      - lambda: |-
          ESP_LOGD("athom-rgbww-light.yaml", "Reset counter");
          id(fast_boot) = 0;
          fast_boot->loop();
          global_preferences->sync();

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP Address"
      disabled_by_default: true
  - platform: template
    name: "${friendly_name} Uptime"
    id: uptime_human
    icon: mdi:clock-start
  - platform: version
    name: "${friendly_name} ESPHome Version"
  - platform: template
    name: "Wifi Status"
    id: wifi_txt_status

time:
  - platform: sntp
    id: my_time
